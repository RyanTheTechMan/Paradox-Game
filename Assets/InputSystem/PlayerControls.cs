//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputSystem/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""First Person"",
            ""id"": ""d9d2f1d7-ec60-4f85-b20c-01bde82db20f"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3948011c-2fae-4dec-9147-1f595e711fe5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""de8af48d-abeb-430e-99dd-af4e95c04c7e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""53d34c90-7c0c-41cc-9ff3-847c7fd22460"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryInteract"",
                    ""type"": ""Button"",
                    ""id"": ""d81095d6-963c-4f35-9492-7a93bca3613a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryInteract"",
                    ""type"": ""Button"",
                    ""id"": ""affd3750-0050-4099-b64e-0fd2de218e4f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TogglePortal"",
                    ""type"": ""Button"",
                    ""id"": ""4bb6a76e-7aee-4670-b5f8-5bb38adae3a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""73e6f7b6-f417-4d66-8803-363dfb3381f9"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""03bf5177-d422-4f04-96f0-45a0e5204cbb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""52e03fbd-dd69-4f13-8d2f-8f9ef0b2ef64"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3578f87e-4fd2-4bff-b581-6075652f2553"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9326444b-9b9b-42e0-ac25-c0bb6523e7ea"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ae41768c-c538-4dd4-a59c-ddb2b1195935"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f394d365-1ed9-487d-9f0c-74c26a0e62ea"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""944da630-113b-4b29-8505-74b0f89b4a59"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""PrimaryInteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b9c42f38-318d-4992-94f0-07587bbf1ca2"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""SecondaryInteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""707eb549-bbc4-499f-a2fe-51e9a92eadc3"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""TogglePortal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard & Mouse"",
            ""bindingGroup"": ""Keyboard & Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // First Person
        m_FirstPerson = asset.FindActionMap("First Person", throwIfNotFound: true);
        m_FirstPerson_Look = m_FirstPerson.FindAction("Look", throwIfNotFound: true);
        m_FirstPerson_Move = m_FirstPerson.FindAction("Move", throwIfNotFound: true);
        m_FirstPerson_Jump = m_FirstPerson.FindAction("Jump", throwIfNotFound: true);
        m_FirstPerson_PrimaryInteract = m_FirstPerson.FindAction("PrimaryInteract", throwIfNotFound: true);
        m_FirstPerson_SecondaryInteract = m_FirstPerson.FindAction("SecondaryInteract", throwIfNotFound: true);
        m_FirstPerson_TogglePortal = m_FirstPerson.FindAction("TogglePortal", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // First Person
    private readonly InputActionMap m_FirstPerson;
    private IFirstPersonActions m_FirstPersonActionsCallbackInterface;
    private readonly InputAction m_FirstPerson_Look;
    private readonly InputAction m_FirstPerson_Move;
    private readonly InputAction m_FirstPerson_Jump;
    private readonly InputAction m_FirstPerson_PrimaryInteract;
    private readonly InputAction m_FirstPerson_SecondaryInteract;
    private readonly InputAction m_FirstPerson_TogglePortal;
    public struct FirstPersonActions
    {
        private @PlayerControls m_Wrapper;
        public FirstPersonActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_FirstPerson_Look;
        public InputAction @Move => m_Wrapper.m_FirstPerson_Move;
        public InputAction @Jump => m_Wrapper.m_FirstPerson_Jump;
        public InputAction @PrimaryInteract => m_Wrapper.m_FirstPerson_PrimaryInteract;
        public InputAction @SecondaryInteract => m_Wrapper.m_FirstPerson_SecondaryInteract;
        public InputAction @TogglePortal => m_Wrapper.m_FirstPerson_TogglePortal;
        public InputActionMap Get() { return m_Wrapper.m_FirstPerson; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FirstPersonActions set) { return set.Get(); }
        public void SetCallbacks(IFirstPersonActions instance)
        {
            if (m_Wrapper.m_FirstPersonActionsCallbackInterface != null)
            {
                @Look.started -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnLook;
                @Move.started -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnJump;
                @PrimaryInteract.started -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnPrimaryInteract;
                @PrimaryInteract.performed -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnPrimaryInteract;
                @PrimaryInteract.canceled -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnPrimaryInteract;
                @SecondaryInteract.started -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnSecondaryInteract;
                @SecondaryInteract.performed -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnSecondaryInteract;
                @SecondaryInteract.canceled -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnSecondaryInteract;
                @TogglePortal.started -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnTogglePortal;
                @TogglePortal.performed -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnTogglePortal;
                @TogglePortal.canceled -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnTogglePortal;
            }
            m_Wrapper.m_FirstPersonActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @PrimaryInteract.started += instance.OnPrimaryInteract;
                @PrimaryInteract.performed += instance.OnPrimaryInteract;
                @PrimaryInteract.canceled += instance.OnPrimaryInteract;
                @SecondaryInteract.started += instance.OnSecondaryInteract;
                @SecondaryInteract.performed += instance.OnSecondaryInteract;
                @SecondaryInteract.canceled += instance.OnSecondaryInteract;
                @TogglePortal.started += instance.OnTogglePortal;
                @TogglePortal.performed += instance.OnTogglePortal;
                @TogglePortal.canceled += instance.OnTogglePortal;
            }
        }
    }
    public FirstPersonActions @FirstPerson => new FirstPersonActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard & Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IFirstPersonActions
    {
        void OnLook(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnPrimaryInteract(InputAction.CallbackContext context);
        void OnSecondaryInteract(InputAction.CallbackContext context);
        void OnTogglePortal(InputAction.CallbackContext context);
    }
}
